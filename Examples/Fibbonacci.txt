NUM00:	VAR 0       ; Declare 32-bit variable to fill space
START: 	LDN NUM01   ; Copy variable to accumulator (negated)
		SUB NUM02   ; Subtract variable from accumulator to get sum (negated)
		STO MYSUM   ; Store accumulator to variable - saves answer ; The next two instructions negate the stored answer
		LDN MYSUM   ; Copy variable to accumulator (negated)
        STO MYSUM   ; Store accumulator to variable
		LDN NUM02   ; Copy NUM02's value to the accumulator (negated)
		STO NUM01   ; Store NUM02's value in NUM01
		LDN NUM01	; negate NUM01
		STO NUM01	; Store positive
		LDN MYSUM   ; Copy MYSUM's value in the accumulator (negated)
		STO NUM02   ; Store MYSUM's value into NUM02
		LDN NUM02	;negate NUM02
		STO NUM02	;Store Positive
END:	JMP NUM00   ; Jumps back to the start
NUM01:	VAR 1 ;Declaring the starting number
NUM02: 	VAR 1 ;Declares the second starting number
MYSUM: VAR 0 ;Declares the sum variable
; THIS PROGRAM SHOULD DO THE FIBONNACI SEQUENCE
